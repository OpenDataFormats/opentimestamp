// source: simplestamp/v1/timestamp.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var simplestamp_v1_attestation_pb = require('../../simplestamp/v1/attestation_pb.js');
goog.object.extend(proto, simplestamp_v1_attestation_pb);
var simplestamp_v1_identity_pb = require('../../simplestamp/v1/identity_pb.js');
goog.object.extend(proto, simplestamp_v1_identity_pb);
var simplestamp_v1_location_pb = require('../../simplestamp/v1/location_pb.js');
goog.object.extend(proto, simplestamp_v1_location_pb);
goog.exportSymbol('proto.simplestamp.v1.SimpleStamp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simplestamp.v1.SimpleStamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.simplestamp.v1.SimpleStamp.repeatedFields_, null);
};
goog.inherits(proto.simplestamp.v1.SimpleStamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simplestamp.v1.SimpleStamp.displayName = 'proto.simplestamp.v1.SimpleStamp';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.simplestamp.v1.SimpleStamp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simplestamp.v1.SimpleStamp.prototype.toObject = function(opt_includeInstance) {
  return proto.simplestamp.v1.SimpleStamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simplestamp.v1.SimpleStamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simplestamp.v1.SimpleStamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    nonce: msg.getNonce_asB64(),
    attestationsList: jspb.Message.toObjectList(msg.getAttestationsList(),
    simplestamp_v1_attestation_pb.Attestation.toObject, includeInstance),
    created: jspb.Message.getFieldWithDefault(msg, 4, 0),
    source: jspb.Message.getFieldWithDefault(msg, 5, ""),
    identity: (f = msg.getIdentity()) && simplestamp_v1_identity_pb.Identity.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && simplestamp_v1_location_pb.Location.toObject(includeInstance, f),
    description: jspb.Message.getFieldWithDefault(msg, 8, ""),
    signature: msg.getSignature_asB64(),
    keyId: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simplestamp.v1.SimpleStamp}
 */
proto.simplestamp.v1.SimpleStamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simplestamp.v1.SimpleStamp;
  return proto.simplestamp.v1.SimpleStamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simplestamp.v1.SimpleStamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simplestamp.v1.SimpleStamp}
 */
proto.simplestamp.v1.SimpleStamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 3:
      var value = new simplestamp_v1_attestation_pb.Attestation;
      reader.readMessage(value,simplestamp_v1_attestation_pb.Attestation.deserializeBinaryFromReader);
      msg.addAttestations(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreated(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 6:
      var value = new simplestamp_v1_identity_pb.Identity;
      reader.readMessage(value,simplestamp_v1_identity_pb.Identity.deserializeBinaryFromReader);
      msg.setIdentity(value);
      break;
    case 7:
      var value = new simplestamp_v1_location_pb.Location;
      reader.readMessage(value,simplestamp_v1_location_pb.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simplestamp.v1.SimpleStamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simplestamp.v1.SimpleStamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simplestamp.v1.SimpleStamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simplestamp.v1.SimpleStamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAttestationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      simplestamp_v1_attestation_pb.Attestation.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIdentity();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      simplestamp_v1_identity_pb.Identity.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      simplestamp_v1_location_pb.Location.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getKeyId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.simplestamp.v1.SimpleStamp.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes nonce = 2;
 * @return {!(string|Uint8Array)}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes nonce = 2;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.simplestamp.v1.SimpleStamp.prototype.setNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Attestation attestations = 3;
 * @return {!Array<!proto.simplestamp.v1.Attestation>}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getAttestationsList = function() {
  return /** @type{!Array<!proto.simplestamp.v1.Attestation>} */ (
    jspb.Message.getRepeatedWrapperField(this, simplestamp_v1_attestation_pb.Attestation, 3));
};


/** @param {!Array<!proto.simplestamp.v1.Attestation>} value */
proto.simplestamp.v1.SimpleStamp.prototype.setAttestationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.simplestamp.v1.Attestation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.simplestamp.v1.Attestation}
 */
proto.simplestamp.v1.SimpleStamp.prototype.addAttestations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.simplestamp.v1.Attestation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.simplestamp.v1.SimpleStamp.prototype.clearAttestationsList = function() {
  this.setAttestationsList([]);
};


/**
 * optional uint32 created = 4;
 * @return {number}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.simplestamp.v1.SimpleStamp.prototype.setCreated = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string source = 5;
 * @return {string}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.simplestamp.v1.SimpleStamp.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Identity identity = 6;
 * @return {?proto.simplestamp.v1.Identity}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getIdentity = function() {
  return /** @type{?proto.simplestamp.v1.Identity} */ (
    jspb.Message.getWrapperField(this, simplestamp_v1_identity_pb.Identity, 6));
};


/** @param {?proto.simplestamp.v1.Identity|undefined} value */
proto.simplestamp.v1.SimpleStamp.prototype.setIdentity = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.simplestamp.v1.SimpleStamp.prototype.clearIdentity = function() {
  this.setIdentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simplestamp.v1.SimpleStamp.prototype.hasIdentity = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Location location = 7;
 * @return {?proto.simplestamp.v1.Location}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getLocation = function() {
  return /** @type{?proto.simplestamp.v1.Location} */ (
    jspb.Message.getWrapperField(this, simplestamp_v1_location_pb.Location, 7));
};


/** @param {?proto.simplestamp.v1.Location|undefined} value */
proto.simplestamp.v1.SimpleStamp.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.simplestamp.v1.SimpleStamp.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simplestamp.v1.SimpleStamp.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string description = 8;
 * @return {string}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.simplestamp.v1.SimpleStamp.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bytes signature = 9;
 * @return {!(string|Uint8Array)}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes signature = 9;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.simplestamp.v1.SimpleStamp.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional string key_id = 10;
 * @return {string}
 */
proto.simplestamp.v1.SimpleStamp.prototype.getKeyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.simplestamp.v1.SimpleStamp.prototype.setKeyId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


goog.object.extend(exports, proto.simplestamp.v1);
